{"version":3,"sources":["style.jsx","Comment.jsx","constants.js","CommentContainer.jsx","index.js"],"names":["Container","styled","Article","Title","Content","Load","Comment","data","id","email","body","CONSTANT","END_POINT","LIMIT","OPTION","root","rootMargin","threshold","CommentContainer","useState","commentData","setCommentData","isLoading","setIsLoading","isEndofData","useRef","endofHTML","page","request","a","fetch","current","response","json","comments","console","log","commentAPI","get","endofScroll","isIntersecting","newComments","length","useEffect","observer","IntersectionObserver","observe","disconnect","map","comment","ref","ReactDOM","render","document","getElementById"],"mappings":"wMAEaA,EAAYC,YAAO,UAAPA,CAAH,iGAMTC,EAAUD,YAAO,UAAPA,CAAH,kMAUPE,EAAQF,YAAO,OAAPA,CAAH,kMAULG,EAAUH,YAAO,MAAPA,CAAH,kDAIPI,EAAOJ,YAAO,KAAPA,CAAH,sE,OCPFK,EArBC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjB,OACE,cAACP,EAAD,UACE,eAACE,EAAD,WACE,mCACE,cAACC,EAAD,yBACA,+BAAOI,EAAKC,QAEd,oCACE,cAACL,EAAD,oBACA,+BAAOI,EAAKE,WAEd,iCACE,cAACN,EAAD,sBACA,cAACC,EAAD,UAAUG,EAAKG,gBCRVC,EAVE,CACfC,UAAW,gDACXC,MAAO,GACPC,OAAQ,CACNC,KAAM,KACNC,WAAY,MACZC,UAAW,ICsDAC,EAtDU,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACtBC,EADsB,KACTC,EADS,OAEKF,oBAAS,GAFd,mBAEtBG,EAFsB,KAEXC,EAFW,KAGvBC,EAAcC,kBAAO,GACrBC,EAAYD,mBACZE,EAAOF,iBAAO,GAEdG,EAAO,uCAAG,8BAAAC,EAAA,sEAEZN,GAAa,GAFD,SAGWO,MAAM,GAAD,OACvBnB,EAASC,UADc,kBACKe,EAAKI,QADV,mBAC4BpB,EAASE,QAJrD,cAGNmB,EAHM,gBAMWA,EAASC,OANpB,cAMNC,EANM,OAOZP,EAAKI,SAAW,EAChBR,GAAa,GARD,kBASLW,GATK,kCAWZC,QAAQC,IAAI,gBAAZ,MAXY,0DAAH,qDAePC,EAAa,CACjBC,IAAI,WAAD,4BAAE,sBAAAT,EAAA,sEAAkBD,IAAlB,mFAAF,kDAAC,IAGAW,EAAW,uCAAG,+BAAAV,EAAA,kFACRW,gBAAmBhB,EAAYO,QADvB,gCAEUM,EAAWC,MAFrB,OAGW,KADrBG,EAFU,QAGAC,OACdlB,EAAYO,SAAU,EAEtBV,GAAe,SAAAD,GAAW,4BAAQA,GAAR,YAAwBqB,OANpC,2CAAH,sDAiBjB,OANAE,qBAAU,WACR,IAAMC,EAAW,IAAIC,qBAAqBN,EAAa5B,EAASG,QAEhE,OADA8B,EAASE,QAAQpB,EAAUK,SACpB,kBAAMa,EAASG,gBACrB,IAGD,qCACG3B,EAAY4B,KAAI,SAAAC,GAAO,OACtB,cAAC,EAAD,CAA0B1C,KAAM0C,GAAlBA,EAAQzC,OAEvBc,GAAa,cAACjB,EAAD,yBACd,qBAAK6C,IAAKxB,Q,MClDhByB,IAASC,OAAO,cAAC,EAAD,IAAsBC,SAASC,eAAe,W","file":"static/js/main.54dfa1af.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled('section')`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Article = styled('article')`\r\n  width: 500px;\r\n  background: #f8f9fa;\r\n  border: 0.5px solid #ced4da;\r\n  box-sizing: border-box;\r\n  border-radius: 20px;\r\n  margin-bottom: 14px;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const Title = styled('span')`\r\n  font-family: SFProDisplay;\r\n  font-size: 18px;\r\n  line-height: 21px;\r\n  font-weight: 600;\r\n  margin-bottom: 12px;\r\n  display: inline-block;\r\n  margin-right: 12px;\r\n`;\r\n\r\nexport const Content = styled('div')`\r\n  margin-top: -10px;\r\n`;\r\n\r\nexport const Load = styled('h1')`\r\n  text-align: center;\r\n  color: crimson;\r\n`;\r\n","import React from 'react';\r\n\r\nimport { Container, Article, Title, Content } from './style';\r\n\r\nconst Comment = ({ data }) => {\r\n  return (\r\n    <Container>\r\n      <Article>\r\n        <header>\r\n          <Title>Comment Id</Title>\r\n          <span>{data.id}</span>\r\n        </header>\r\n        <section>\r\n          <Title>Email</Title>\r\n          <span>{data.email}</span>\r\n        </section>\r\n        <main>\r\n          <Title>Comment</Title>\r\n          <Content>{data.body}</Content>\r\n        </main>\r\n      </Article>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","const CONSTANT = {\r\n  END_POINT: 'https://jsonplaceholder.typicode.com/comments',\r\n  LIMIT: 10,\r\n  OPTION: {\r\n    root: null,\r\n    rootMargin: '0px',\r\n    threshold: 1.0,\r\n  },\r\n};\r\n\r\nexport default CONSTANT;\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport Comment from './Comment';\nimport CONSTANT from './constants';\n\nimport { Load } from './style'\n\nconst CommentContainer = () => {\n  const [commentData, setCommentData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const isEndofData = useRef(false);\n  const endofHTML = useRef();\n  const page = useRef(1);\n\n  const request = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(\n        `${CONSTANT.END_POINT}?_page=${page.current}&_limit=${CONSTANT.LIMIT}`,\n      );\n      const comments = await response.json();\n      page.current += 1;\n      setIsLoading(false);\n      return comments;\n    } catch (e) {\n      console.log('Error found: ', e);\n    }\n  };\n\n  const commentAPI = {\n    get: async () => await request(),\n  };\n\n  const endofScroll = async ([entry]) => {\n    if (entry.isIntersecting && !isEndofData.current) {\n      const newComments = await commentAPI.get();\n      if (newComments.length === 0) {\n        isEndofData.current = true;\n      } else {\n        setCommentData(commentData => [...commentData, ...newComments]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(endofScroll, CONSTANT.OPTION);\n    observer.observe(endofHTML.current);\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <>\n      {commentData.map(comment => (\n        <Comment key={comment.id} data={comment} />\n      ))}\n      {isLoading && <Load>Loading...</Load>}\n      <div ref={endofHTML} />\n    </>\n  );\n};\n\nexport default CommentContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CommentContainer from './CommentContainer';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<CommentContainer />, document.getElementById('root'));\n"],"sourceRoot":""}