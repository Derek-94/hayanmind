{"version":3,"sources":["style.jsx","Comment.jsx","CommentContainer.jsx","index.js"],"names":["Container","styled","Article","Title","ConTent","Comment","data","className","id","email","body","CommentContainer","useState","commentData","setCommentData","isLoading","setIsLoading","endofHTML","useRef","page","request","a","fetch","current","response","json","comments","console","log","commentAPI","get","endofScroll","isIntersecting","getComments","useEffect","observer","IntersectionObserver","root","rootMargin","threshold","observe","disconnect","map","comment","style","textAlign","ref","ReactDOM","render","document","getElementById"],"mappings":"sMAEaA,EAAYC,YAAO,UAAPA,CAAH,uGAMTC,EAAUD,YAAO,UAAPA,CAAH,gNAUPE,EAAQF,YAAO,OAAPA,CAAH,gNAULG,EAAUH,YAAO,MAAPA,CAAH,oD,OCFLI,EAtBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEjB,OACO,cAACN,EAAD,UACI,eAACE,EAAD,CAASK,UAAY,UAArB,UACI,yBAAQA,UAAY,qBAApB,UACI,cAACJ,EAAD,CAAOI,UAAY,QAAnB,wBACA,+BAAOD,EAAKE,QAEhB,0BAASD,UAAY,gBAArB,UACI,cAACJ,EAAD,CAAOI,UAAY,QAAnB,mBACA,sBAAMA,UAAY,cAAlB,SAAiCD,EAAKG,WAE1C,uBAAMF,UAAY,kBAAlB,UACI,cAACJ,EAAD,CAAOI,UAAY,QAAnB,qBACA,cAACH,EAAD,UAAUE,EAAKI,gBC2CpBC,EAzDU,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACpBC,EADoB,KACPC,EADO,OAEOF,oBAAS,GAFhB,mBAEpBG,EAFoB,KAETC,EAFS,KAGrBC,EAAYC,mBACZC,EAAOD,iBAAO,GAEdE,EAAO,uCAAG,8BAAAC,EAAA,sEAERL,GAAa,GAFL,SAGeM,MAAM,GAAD,OAXtB,gDAWsB,kBAAuBH,EAAKI,QAA5B,eAHpB,cAGFC,EAHE,gBAIeA,EAASC,OAJxB,cAIFC,EAJE,OAKRP,EAAKI,SAAW,EAChBP,GAAa,GANL,kBAODU,GAPC,kCASRC,QAAQC,IAAI,gBAAZ,MATQ,0DAAH,qDAaPC,EAAa,CACfC,IAAI,WAAD,4BAAE,sBAAAT,EAAA,sEACYD,IADZ,mFAAF,kDAAC,IAKFW,EAAW,uCAAG,+BAAAV,EAAA,kFACNW,eADM,gCAEcH,EAAWC,MAFzB,OAENG,EAFM,OAGZnB,GAAe,SAACD,GAAD,4BAAqBA,GAArB,YAAqCoB,OAHxC,2CAAH,sDAmBjB,OAZAC,qBAAU,WACN,IAMMC,EAAW,IAAIC,qBAAqBL,EAN1B,CACZM,KAAM,KACNC,WAAY,MACZC,UAAW,IAKf,OADAJ,EAASK,QAAQvB,EAAUM,SACpB,kBAAMY,EAASM,gBACvB,IAGC,qCACK5B,EAAY6B,KAAI,SAAAC,GAAO,OACpB,cAAC,EAAD,CAA4BrC,KAAQqC,GAApBA,EAAQnC,OAE3BO,GACG,oBAAI6B,MAAS,CAAEC,UAAW,UAA1B,wBAEJ,qBAAKC,IAAK7B,Q,MCpDtB8B,IAASC,OAAO,cAAC,EAAD,IAAsBC,SAASC,eAAe,W","file":"static/js/main.e9d13f9d.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled('section')`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Article = styled('article')`\r\n    width: 500px;\r\n    background: #f8f9fa;\r\n    border: 0.5px solid #ced4da;\r\n    box-sizing: border-box;\r\n    border-radius: 20px;\r\n    margin-bottom: 14px;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const Title = styled('span')`\r\n    font-family: SFProDisplay;\r\n    font-size: 18px;\r\n    line-height: 21px;\r\n    font-weight: 600;\r\n    margin-bottom: 12px;\r\n    display: inline-block;\r\n    margin-right: 12px;\r\n`; \r\n\r\nexport const ConTent = styled('div')`\r\n    margin-top: -10px;\r\n`;","import React from 'react';\r\n\r\nimport { Container, Article, Title, ConTent } from './style'\r\n\r\nconst Comment = ({data}) => {\r\n\r\n\treturn (\r\n        <Container>\r\n            <Article className = 'article'>\r\n                <header className = 'comment-id-section'>\r\n                    <Title className = 'title'>Comment Id</Title>\r\n                    <span>{data.id}</span>\r\n                </header>\r\n                <section className = 'email-section'>\r\n                    <Title className = 'title'>Email</Title>\r\n                    <span className = 'email-value'>{data.email}</span>\r\n                </section>\r\n                <main className = 'content-section'>\r\n                    <Title className = 'title'>Comment</Title>\r\n                    <ConTent>{data.body}</ConTent>\r\n                </main>\r\n            </Article>\r\n        </Container>\r\n\t)\r\n}\r\n\r\nexport default Comment;\r\n","import React, { useState, useEffect, useRef } from 'react'\nimport Comment from './Comment'\n\nconst END_POINT = 'https://jsonplaceholder.typicode.com/comments';\n\nconst CommentContainer = () => {\n    const [commentData, setCommentData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const endofHTML = useRef();\n    const page = useRef(1);\n    \n    const request = async() => {\n        try {\n            setIsLoading(true);\n            const response = await fetch(`${END_POINT}?_page=${page.current}&_limit=10`);\n            const comments = await response.json();\n            page.current += 1;\n            setIsLoading(false)\n            return comments;\n        } catch(e) {\n            console.log(\"Error found: \", e);\n        }\n    }\n\n    const commentAPI = {\n        get: async() => {\n            return await request();\n        }\n    }\n\n    const endofScroll = async([entry]) => {\n        if (entry.isIntersecting) {\n            const getComments = await commentAPI.get();\n            setCommentData((commentData) => [...commentData, ...getComments])\n        }\n    }\n\n    useEffect(() => {\n        const options = {\n            root: null,\n            rootMargin: \"0px\",\n            threshold: 1.0,\n        };\n\n        const observer = new IntersectionObserver(endofScroll, options);\n        observer.observe(endofHTML.current);\n        return () => observer.disconnect();\n    }, []);\n\n    return (\n        <>\n            {commentData.map(comment => (\n                <Comment key = {comment.id} data = {comment}/>\n            ))}\n            {isLoading && (\n                <h1 style = {{ textAlign: 'center' }}>Loading...</h1>\n            )}\n            <div ref={endofHTML} />\n        </>\n    )\n}\n\nexport default CommentContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CommentContainer from './CommentContainer';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<CommentContainer />, document.getElementById('root'));\n"],"sourceRoot":""}